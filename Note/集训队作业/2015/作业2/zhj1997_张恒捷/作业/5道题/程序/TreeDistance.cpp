#include<bits/stdc++.h>
#define int64 long long
#define sqr(x) (x)*(x)
#define mk make_pair
#define pb push_back
#define fi first
#define se second
#define rep(i,x,y) for(int i=x;i<=y;++i)
#define VI vector<int>
#define VI64 vector<int64>
#define VS vector<string>
#define PII pair<int,int>
#define PDD pair<double,double>
#define VPII vector< PII >
#define SZ(x) ((int)(x).size())
#define N 55
using namespace std;
const int mo=1e9+7,inf=1000000000;
const double pi=acos(-1);
const int d[8][2]={-1,0, 0,1, 1,0, 0,-1 , -1,-1, -1,1, 1,1, 1,-1};
int size[N],f[N][N][N],g[N][N],n,ans[N],C[N][N];
VI E[N];
int Pow(int x,int y){
	int res=1;
	while(y){
		if(y&1)res=1ll*res*x%mo;
		y/=2;
		x=1ll*x*x%mo;
	}
	return res;
}
void Plus(int &x,int y){
	x+=y;
	if(x>=mo)x-=mo;
	if(x<0)x+=mo;
}
void dfs(int x,int ff){
	for(int i:E[x])if(i!=ff)dfs(i,x);
	f[x][0][0]=1;
	size[x]=1;
	for(int y:E[x])if(y!=ff){
		rep(i,0,size[x]+size[y])
			rep(j,0,size[x]+size[y])g[i][j]=0;
		rep(i,0,size[x])
			rep(j,0,size[x])
				rep(u,0,size[y])
					rep(v,0,size[y]){
						Plus(g[i+u][j],1ll*f[x][i][j]*f[y][u][v]%mo*(v+1)*(n+1)%mo);
						Plus(g[i+u+1][j+v+1],1ll*f[x][i][j]*f[y][u][v]%mo);
					}
		size[x]+=size[y];
		rep(i,0,size[x])
			rep(j,0,size[x])f[x][i][j]=g[i][j];
	}
}
class TreeDistance {
public:
	int countTrees(vector <int> p, int K) {
		n=SZ(p);
		rep(i,0,n-1){
			E[i+1].pb(p[i]);
			E[p[i]].pb(i+1);
		}
		dfs(0,-1);
		rep(i,0,n+1)
			rep(j,0,n+1)Plus(ans[i],1ll*f[0][i][j]*(j+1)*(n+1)%mo);
		rep(i,0,n+1)ans[i]=1ll*ans[i]*Pow(n+1,mo-3)%mo;
		rep(i,0,n+1)
			rep(j,0,i)C[i][j]=!j?1:(C[i-1][j-1]+C[i-1][j])%mo;
		int Ans=0;
		for(int i=n;i>=n-K && i>=0;--i){
			Plus(Ans,ans[i]);
			for(int j=i-1;j>=n-K && j>=0;--j)ans[j]=(ans[j]-1ll*ans[i]*C[i][j])%mo;
		}
		return (Ans+mo)%mo;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << p1;
	cout << "]" << endl;
	TreeDistance *obj;
	int answer;
	obj = new TreeDistance();
	clock_t startTime = clock();
	answer = obj->countTrees(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	int p1;
	int p2;
	
/*	{
	// ----- test 0 -----
	int t0[] = {0,0};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	p2 = 3;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {0,1,2,2,0};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	p2 = 28;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {0,1,2,2,0};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	p2 = 222;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {0,1,2,2,0};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 50;
	p2 = 1296;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	int t0[] = {0,1,2,2,0};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	p2 = 1;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	{
	// ----- test 5 -----
	int t0[] = {0,1,0,3,3,4,4,5,6,8,3,1,12,12,13,10,4,8,13,17,2,10,12,20,2,14,17,19,15,0,22,15,3,8,3,17,27,2,12,38,37,4,40,29,9,22,43,32,37};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	p2 = 7124;
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 6 -----
	int t0[] = {0,0,0,0,2,3,1,2,3,7,3,10,8,8,9,1,2,0,7,17,19,2,17,2,0,6,4,9,12,14,8,12,10,30,20,30,8,36,28,22,8,2,2,13,26,14,46,6,25};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 10;
	p2 = 310259667;
	all_right = KawigiEdit_RunTest(6, p0, p1, true, p2) && all_right;
	// -----------------z
	}*/
	
	for(;;);
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

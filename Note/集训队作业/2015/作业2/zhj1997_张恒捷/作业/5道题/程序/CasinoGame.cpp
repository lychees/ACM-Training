#include<bits/stdc++.h>
#define int64 long long
#define sqr(x) (x)*(x)
#define mk make_pair
#define pb push_back
#define fi first
#define se second
#define rep(i,x,y) for(int i=x;i<=y;++i)
#define VI vector<int>
#define VI64 vector<int64>
#define VS vector<string>
#define PII pair<int,int>
#define PDD pair<double,double>
#define VPII vector< PII >
#define SZ(x) ((int)(x).size())
#define N 1100
#define maxS 90
using namespace std;
const int mo=1e9+7,inf=1000000000;
const double pi=acos(-1);
const int d[8][2]={-1,0, 0,1, 1,0, 0,-1 , -1,-1, -1,1, 1,1, 1,-1};
long double C[N][N],Pow33[N],Pow67[N],f[2][N][maxS+10],ans[maxS],g[maxS+10][maxS+10],
	Sqrt2[N];
int n,t,len;
class CasinoGame {
public:
	void prep(){
		rep(i,0,1000)
			rep(j,0,i)C[i][j]=!j?1:C[i-1][j-1]+C[i-1][j];
		Pow33[0]=Pow67[0]=1;
		Sqrt2[0]=2;
		rep(i,1,1000){
			Pow33[i]=Pow33[i-1]*0.33;
			Pow67[i]=Pow67[i-1]*0.67;
			Sqrt2[i]=sqrt(Sqrt2[i-1]);
		}
	}
	double expectedValue(vector <int> S) {
		n=SZ(S);
		t=0;
		memset(f,0,sizeof(f));
		f[t][n][0]=1;
		len=n;
		prep();
		rep(u,1,maxS){
			for(int j=len;j>=0;--j){
				long double tmp=0;
				for(int k=0;k<=u;++k)tmp+=f[t][j][k];
				if(tmp>1e-20){
					len=min(len,j+1);
					break;
				}
			}
			
			rep(i,1,n)
				rep(j,0,u)f[t^1][i][j]=0;
			
			rep(i,1,len)
				rep(j,0,u)if(f[t][i][j]>1e-20){
					ans[j]+=f[t][i][j]/i;
					for(int x=0;x<=i-2;++x){
						double tmp=f[t][i][j]*(i-1)/i*C[i-2][x]*Pow33[x]*Pow67[i-2-x];
						f[t^1][i-x-1][j+1]+=tmp*0.66;
						f[t^1][i-x-1][0]+=tmp*0.01;
					}
				}
			t^=1;
		}
		double Ans=0;
	/*	for(int i=0;i<=10;++i){
			for(int j=0;j<1<<i;++j){
				for(int k=0;k<n;++k){
					double tmp=S[k]/1000.0;
					for(int u=0;u<i;++u)if((j>>u)&1)tmp=sqrt(tmp);
						else tmp=tmp/2;
					Ans+=ans[i]*tmp/(1<<i);
				}
			}
		}*/
		g[0][0]=1;
		rep(i,1,maxS){
			for(int j=0;j<=i;++j)
				g[i][j]=((j==0?0:g[i-1][j-1])+g[i-1][j]/Sqrt2[j])/2;
		}
		/*rep(i,0,10){
			rep(j,0,i)printf("%Lf ",g[i][j]);
			puts("");
		}*/
		for(int t=0;t<=maxS;++t){
			for(int i=0;i<n;++i){
				double tmp=S[i]/1000.0;
				for(int j=0;j<=t;++j){
					Ans+=ans[t]*tmp*g[t][j];
					tmp=sqrt(tmp);
				}
			}
		}
		return Ans;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, double p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}";
	cout << "]" << endl;
	CasinoGame *obj;
	double answer;
	obj = new CasinoGame();
	clock_t startTime = clock();
	answer = obj->expectedValue(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == answer && fabs(p1 - answer) <= 1e-9 * max(1.0, fabs(p1));
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	double p1;
	
/*	{
	// ----- test 0 -----
	int t0[] = {100000,100000};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 120.80000000000001;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {68391};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 68.391;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {9000,25000,100000};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 59.47600366439891;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {932452,32431,234511,1,999,12341,432134,987654,1000000};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 569.7984079363877;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	int t0[] = {655482,657692,166545,510808,406135,487463,572526,89578,844121,881092,843697,733297,998007,518962,879347,652488,193968,569275,486335,194222,498550,98979,729632,518857,959392,22656,728919,158737,793281,75238,760687,449635,732925,558907,592118,770734,47242,165516,491986,891358,678283,336555,257207,308841,487191,137426,961324,681154,338375,80210,875371,468599,809986,237554,987452,770250,891008,348922,928983,685161,424155,690542,766471,788754,881123,359461,560360,928360,156651,684020,452270,466608,21447,341151,775444,140312,110251,369319,821461,448621,81203,329383,548895,891185,566933,168898,662307,458813,517815,223841,775648,573645,546058,174670,363271,428053,165805,555306,357286,322452,240198,441230,420734,892443,414055,827853,33627,524301,828846,855084,604596,910045,816141,154363,802102,15625,323256,96960,106112,472746,320797,881756,47263,866850,688100,410529,295775,853901,597509,284735,808027,837703,357639,229633,362697,771689,58358,396319,927664,518879,883077,533133,429796,700091,687491,863572,715711,642422,592206,821819,116040,912998,336126,794100,412399,25098,836303,339849,510673,434685,256258,319572,904062,613893,180880,267631,18133,239233,663945,945793,389786,179574,111477,819577,879660,430642,315700,227922,73936,907902,681415,820773,453451,649215,615745,865846,674309,452921,837369,816656,519280,94499,137101,424214,340066,317976,691840,988997,188883,386109};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 817.8156226417173;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}*/
	
	{
	// ----- test 5 -----
	int t0[] = {};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1650.8120310299312;
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}
	for(;;);
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

叶落归根(hometown)
时间限制：3 Sec 内存限制：512 MB
题目描述
叶落归根――树叶从树根生发出来，凋落后最终还是回到树根。比喻事物总有一定的归宿。接下来是题目。
给定一个n个点的有向图G（点的编号为1~n），一开始落叶（仅作为一个代号，你也可以当成是Alice、Bob、甲乙丙丁戊己庚辛壬癸…）会在G的某个点s上。总共有t个单位时间，每个单位时间落叶都必须通过一条当前所在点的出边到达下一个点（有时下一个点和当前点会是相同的）。
需要注意的是，如果当前所在点没有任何出边，落叶就会在这个单位时间被迫离开这张图，并且我们认为落叶永远不会再回来了。
你要做的是对于每一个起始点s以及每一个总时长t(1<=t<=Q且为整数)求出落叶在起始点为s且经过t单位时间后的位置也是s的方案数。
两个方案不同，当且仅当两个方案中存在至少一个时刻落叶所经过的边不是图G中的同一条边。
为了便于检验，只需要输出所有情况（即所有不同的起始点和总时长，一共n*Q种情况）的方案数对给定正整数P取模后的异或和即可――也就是说，假设所有情况的方案数分别是ans1、ans2、ans3……你要输出的就是(ans1 mod P) xor (ans2 mod P) xor (ans3 mod P)……
输入
第一行3个整数n、Q、P，分别表示图G的点数、总时长t的上限和给定的模数P
接下来n行，每行n个整数，其中第i行第j个数表示图G中从i出发到j的单向边数目
输出
一行一个整数，表示所有情况的方案数对给定正整数P取模后的异或和
样例输入
2 2 1000000207
2 3
4 5
样例输出
50
数据规模和约定
对于前10%的数据：n=2,Q=20
对于另外10%的数据：n=3,Q=12
对于前50%的数据：n<=20
对于100%的数据：
1<=n<=100，P<=2^30,Q<=10000
对于任意一对(u,v)，图G中从u到v的边数不超过2^30
